{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VOtpInput/VOtpInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VOtpInput.sass'\n\n// Components\nimport { makeVFieldProps, VField } from '@/components/VField/VField'\nimport { VOverlay } from '@/components/VOverlay/VOverlay'\nimport { VProgressCircular } from '@/components/VProgressCircular/VProgressCircular'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, watch } from 'vue'\nimport { filterInputAttrs, focusChild, genericComponent, IN_BROWSER, only, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\nexport type VOtpInputSlots = {\n  default: never\n  loader: never\n}\n\nexport const makeVOtpInputProps = propsFactory({\n  autofocus: Boolean,\n  divider: String,\n  focusAll: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.input.otp',\n  },\n  length: {\n    type: [Number, String],\n    default: 6,\n  },\n  modelValue: {\n    type: [Number, String],\n    default: undefined,\n  },\n  placeholder: String,\n  type: {\n    type: String as PropType<'text' | 'password' | 'number'>,\n    default: 'text',\n  },\n\n  ...makeDimensionProps(),\n  ...makeFocusProps(),\n  ...only(makeVFieldProps({\n    variant: 'outlined' as const,\n  }), [\n    'baseColor',\n    'bgColor',\n    'class',\n    'color',\n    'disabled',\n    'error',\n    'loading',\n    'rounded',\n    'style',\n    'theme',\n    'variant',\n  ]),\n}, 'VOtpInput')\n\nexport const VOtpInput = genericComponent<VOtpInputSlots>()({\n  name: 'VOtpInput',\n\n  props: makeVOtpInputProps(),\n\n  emits: {\n    finish: (val: string) => true,\n    'update:focused': (val: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { dimensionStyles } = useDimension(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      '',\n      val => String(val).split(''),\n      val => val.join('')\n    )\n    const { t } = useLocale()\n\n    const fields = computed(() => Array(Number(props.length)).fill(0))\n    const focusIndex = ref(-1)\n    const contentRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLInputElement[]>([])\n    const current = computed(() => inputRef.value[focusIndex.value])\n\n    function onInput () {\n      const array = model.value.slice()\n      const value = current.value.value\n\n      array[focusIndex.value] = value\n\n      model.value = array\n\n      let target: any = null\n\n      if (focusIndex.value > model.value.length) {\n        target = model.value.length + 1\n      } else if (focusIndex.value + 1 !== Number(props.length)) {\n        target = 'next'\n      } else {\n        requestAnimationFrame(() => current.value?.blur())\n      }\n\n      if (target) focusChild(contentRef.value!, target)\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const array = model.value.slice()\n      const index = focusIndex.value\n      let target: 'next' | 'prev' | 'first' | 'last' | number | null = null\n\n      if (![\n        'ArrowLeft',\n        'ArrowRight',\n        'Backspace',\n        'Delete',\n      ].includes(e.key)) return\n\n      e.preventDefault()\n\n      if (e.key === 'ArrowLeft') {\n        target = 'prev'\n      } else if (e.key === 'ArrowRight') {\n        target = 'next'\n      } else if (['Backspace', 'Delete'].includes(e.key)) {\n        array[focusIndex.value] = ''\n\n        model.value = array\n\n        if (focusIndex.value > 0 && e.key === 'Backspace') {\n          target = 'prev'\n        } else {\n          requestAnimationFrame(() => {\n            inputRef.value[index].select()\n          })\n        }\n      }\n\n      requestAnimationFrame(() => {\n        if (target != null) {\n          focusChild(contentRef.value!, target)\n        }\n      })\n    }\n\n    function onPaste (index: number, e: ClipboardEvent) {\n      e.preventDefault()\n      e.stopPropagation()\n\n      model.value = (e?.clipboardData?.getData('Text') ?? '').split('')\n\n      inputRef.value?.[index].blur()\n    }\n\n    function reset () {\n      model.value = []\n    }\n\n    function onFocus (e: FocusEvent, index: number) {\n      focus()\n\n      focusIndex.value = index\n    }\n\n    function onBlur () {\n      blur()\n\n      focusIndex.value = -1\n    }\n\n    provideDefaults({\n      VField: {\n        disabled: computed(() => props.disabled),\n        error: computed(() => props.error),\n        variant: computed(() => props.variant),\n      },\n    }, { scoped: true })\n\n    watch(model, val => {\n      if (val.length === props.length) emit('finish', val.join(''))\n    }, { deep: true })\n\n    watch(focusIndex, val => {\n      if (val < 0) return\n\n      IN_BROWSER && window.requestAnimationFrame(() => {\n        inputRef.value[val].select()\n      })\n    })\n\n    useRender(() => {\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      return (\n        <div\n          class={[\n            'v-otp-input',\n            {\n              'v-otp-input--divided': !!props.divider,\n            },\n            props.class,\n          ]}\n          style={[\n            props.style,\n          ]}\n          { ...rootAttrs }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-otp-input__content\"\n            style={[\n              dimensionStyles.value,\n            ]}\n          >\n            { fields.value.map((_, i) => (\n              <>\n                { props.divider && i !== 0 && (\n                  <span class=\"v-otp-input__divider\">{ props.divider }</span>\n                )}\n\n                <VField\n                  focused={ (isFocused.value && props.focusAll) || focusIndex.value === i }\n                  key={ i }\n                >\n                  {{\n                    ...slots,\n                    default: () => {\n                      return (\n                        <input\n                          ref={ val => inputRef.value[i] = val as HTMLInputElement }\n                          aria-label={ t(props.label, i + 1) }\n                          autofocus={ i === 0 && props.autofocus }\n                          autocomplete=\"one-time-code\"\n                          class={[\n                            'v-otp-input__field',\n                          ]}\n                          inputmode=\"text\"\n                          min={ props.type === 'number' ? 0 : undefined }\n                          maxlength=\"1\"\n                          placeholder={ props.placeholder }\n                          type={ props.type }\n                          value={ model.value[i] }\n                          onInput={ onInput }\n                          onFocus={ e => onFocus(e, i) }\n                          onBlur={ onBlur }\n                          onKeydown={ onKeydown }\n                          onPaste={ event => onPaste(i, event) }\n                        />\n                      )\n                    },\n                  }}\n                </VField>\n              </>\n            ))}\n\n            <input\n              class=\"v-otp-input-input\"\n              type=\"hidden\"\n              { ...inputAttrs }\n              value={ model.value.join('') }\n            />\n\n            <VOverlay\n              contained\n              content-class=\"v-otp-input__loader\"\n              model-value={ !!props.loading }\n              persistent\n            >\n              { slots.loader?.() ?? (\n                <VProgressCircular\n                  color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n                  indeterminate\n                  size=\"24\"\n                  width=\"2\"\n                />\n              )}\n            </VOverlay>\n\n            { slots.default?.() }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      blur: () => {\n        inputRef.value?.some(input => input.blur())\n      },\n      focus: () => {\n        inputRef.value?.[0].focus()\n      },\n      reset,\n      isFocused,\n    }\n  },\n})\n\nexport type VOtpInput = InstanceType<typeof VOtpInput>\n"],
  "mappings": "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",
  "names": ["makeVOtpInputProps", "propsFactory", "autofocus", "Boolean", "divider", "String", "focusAll", "label", "type", "default", "length", "Number", "modelValue", "undefined", "placeholder", "makeDimensionProps", "makeFocusProps", "only", "makeVFieldProps", "variant", "VOtpInput", "genericComponent", "name", "props", "emits", "finish", "val", "setup", "_ref", "attrs", "emit", "slots", "dimensionStyles", "useDimension", "isFocused", "focus", "blur", "useFocus", "model", "useProxiedModel", "split", "join", "t", "useLocale", "fields", "computed", "Array", "fill", "focusIndex", "ref", "contentRef", "inputRef", "current", "value", "onInput", "array", "slice", "target", "requestAnimationFrame", "focusChild", "onKeydown", "e", "index", "includes", "key", "preventDefault", "select", "onPaste", "stopPropagation", "clipboardData", "getData", "reset", "onFocus", "onBlur", "provideDefaults", "VField", "disabled", "error", "scoped", "watch", "deep", "IN_BROWSER", "window", "useRender", "rootAttrs", "inputAttrs", "filterInputAttrs", "_createVNode", "_mergeProps", "class", "style", "map", "_", "i", "_Fragment", "event", "VOverlay", "loading", "loader", "VProgressCircular", "some", "input"]
}
